(in-package :iodb-ui)

(defsail snazzy-form-sail ()
  ((title :initarg :title :accessor snazzy-form-title)
   (subtitle :initarg :subtitle :accessor snazzy-form-subtitle)
   (submit-text :initarg :submit-text :accessor snazzy-form-submit-text)
   (cancel-text :initarg :cancel-text :accessor snazzy-form-cancel-text)
   (form-fields :initarg :form-fields :initform (array) :accessor snazzy-form-fields))
  (:documentation "A good-looking form.")
  (:html
   #L(cl-who:with-html-output-to-string (stream)
       (:div :field "root"
	     :class "snazzy-form"
	     (:form
	      :field (ps:symbol-to-js-string :form)
	      ;; title
	      (:h1 :field (ps:symbol-to-js-string :title)
		   " ")
	      ;; description
	      (:p :field (ps:symbol-to-js-string :subtitle)
		  " ")
	      (:div :class "floatholder"
		    :field (ps:symbol-to-js-string :children)
		    " ")
	      (:div :class "button-holder"
		    (:input :class "submit"
			    :type "submit"
			    :value "Submit"
			    :field (ps:symbol-to-js-string :submit-button))
		    (:input :class "cancel"
			    :type "button"
			    :value "Cancel"
			    :field (ps:symbol-to-js-string :cancel-button)))
		    
		    
	       (:div :class "spacer" " "))))))

(defsail input-sail ()
  ()
  (:html
   #L(cl-who:with-html-output-to-string (stream)
       (:input
	:type "text"))))

(defsail textarea-input-sail ()
  ()
  (:html
   #L(cl-who:with-html-output-to-string (stream)
       (:textarea
	:rows "3" :cols "70"))))

(defmethod set-input-sail-name ((sail input-sail) name)
  (setf (slot-value (sail-field :root) 'js-global::name) name))

(defmethod input-value ((sail input-sail))
  (return (slot-value (sail-field :root) 'js-global::value)))

(defsail snazzy-form-field-sail ()
  ((title :initarg :title :accessor snazzy-form-field-title)
   (note :initarg :note :accessor snazzy-form-field-note)
   (input-name :initarg :input-name :accessor snazzy-form-field-input-name)
   (input :initarg :input  :accessor snazzy-form-field-input
	  :initform (make-instance input-sail)))
  (:documentation "A good-looking form field.")
  (:html
   #L(cl-who:with-html-output-to-string (stream)
       (:div
	:class "form-field"
	(:label
	 :field (ps:symbol-to-js-string :label)
	 (:span
	  :field (ps:symbol-to-js-string :title)
	  " ")
	 (:span :class "note"
		:field (ps:symbol-to-js-string :note)
		" "))
	(:div :class "input"
	      :field (ps:symbol-to-js-string :input-area)
	 
	 " ")))))

(defmethod snazzy-form-form ((sail snazzy-form-sail))
  (return (slot-value sail 'view 'dom :form)))

(defmethod add-form-field ((sail snazzy-form-sail) (fld standard-sail))
  (methcall 'js-global::push (snazzy-form-fields sail) fld)
  (add-subsail sail fld))



(defmethod post-render ((sail snazzy-form-sail))
  (setf (slot-value sail 'view 'dom :submit-button 'js-global::value)
	(or (snazzy-form-submit-text sail) "Submit"))
  (setf (slot-value sail 'view 'dom :cancel-button 'js-global::value)
	(or (snazzy-form-cancel-text sail) "Cancel"))
  (let ((fields (snazzy-form-fields sail)))
    (when fields
      (dolist (field fields)
	(add-form-field sail field))))

  (return (call-next-method)))

(defmethod post-render ((sail snazzy-form-field-sail))

  (add-subsail sail (snazzy-form-field-input sail)
	       :group :input-area)

  (return (call-next-method))
  #+nil(set-input-name (snazzy-form-field-input sail) (snazzy-form-field-input-name sail)))

