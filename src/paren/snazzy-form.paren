(in-package :iodb-ui)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;  Snazzy form top-level object
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail snazzy-form-sail ()
  ((title :initarg :title :accessor snazzy-form-title)
   (subtitle :initarg :subtitle :accessor snazzy-form-subtitle)
   (submit-text :initarg :submit-text :accessor snazzy-form-submit-text)
   (cancel-text :initarg :cancel-text :accessor snazzy-form-cancel-text)
   (form-fields :initarg :form-fields :initform (array) :accessor snazzy-form-fields)
   (form-components :initarg :form-components :initform (array) :accessor snazzy-form-components))
  (:documentation "A good-looking form.")
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:div :field "root"
	     :class "snazzy-form"
	     (:form
	      :field (ps:symbol-to-js-string :form)
	      ;; title
	      (:h1 :field (ps:symbol-to-js-string :title)
		   " ")
	      ;; description
	      (:p :field (ps:symbol-to-js-string :subtitle) :class "subtitle"
		  " ")
	      (:div :class "floatholder"
		    :field (ps:symbol-to-js-string :children)
		    " ")
	      (:div :class "button-holder"
		    (:input :class "submit"
			    :type "submit"
			    :value "Submit"
			    :field (ps:symbol-to-js-string :submit-button))
		    (:input :class "cancel"
			    :type "button"
			    :value "Cancel"
			    :field (ps:symbol-to-js-string :cancel-button)))
		    
		    
	       (:div :class "spacer" " "))))))

(defmethod post-render ((sail snazzy-form-sail))

  (setf-field
   (sail)
   :title (snazzy-form-title sail)
   :subtitle (snazzy-form-subtitle sail))

  (setf (slot-value sail 'view 'dom :submit-button 'js-global::value)
	(or (snazzy-form-submit-text sail) "Submit"))
  (setf (slot-value sail 'view 'dom :cancel-button 'js-global::value)
	(or (snazzy-form-cancel-text sail) "Cancel"))
  (let ((fields (snazzy-form-fields sail)))
    (when fields
      (dolist (field fields)
	(add-form-field sail field))))

  (return (call-next-method)))

(defmethod snazzy-form-form ((sail snazzy-form-sail))
  (return (slot-value sail 'view 'dom :form)))

(defmethod add-form-field ((sail snazzy-form-sail) (fld standard-sail) &key (render t))
  (methcall 'js-global::push (snazzy-form-fields sail) fld)
  (when render
    (add-subsail sail fld)))

(defmethod snazzy-form-field ((sail snazzy-form-sail) inp-name)
  (dolist (field (snazzy-form-fields sail))
    (when (=== (snazzy-form-field-input-name field) inp-name)
      (return field))))


(defmethod add-form-component ((sail snazzy-form-sail) comp &key (render t))
  (methcall 'js-global::push (snazzy-form-components sail) comp)
  (when render
    (add-subsail sail comp)))

#+nil
(defmethod snazzy-form-component ((sail snazzy-form-sail) inp-name)
  (dolist (field (snazzy-form-fields sail))
    (when (=== (snazzy-form-field-input-name field) inp-name)
      (return field))))


;;;; encoding form to JSON
(defmethod form-as-json-object ((sail snazzy-form-sail))
  (let ((obj (create)))
    (dolist (field (snazzy-form-fields sail))
      (add-to-json-object field obj))
    (return obj)))

(defgeneric add-to-json-object (sail obj))
(defun json-value (val)
  (let ((special-serializer (and val (slot-value val 'as-json-value))))
    (return
      (if special-serializer
	  (special-serializer val)
	  val))))

;;;; submitting form to server

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;  Fields
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail snazzy-form-field-sail ()
  ((title :initarg :title :accessor snazzy-form-field-title)
   (note :initarg :note :accessor snazzy-form-field-note)
   (input-name :initarg :input-name :accessor snazzy-form-field-input-name)
   (input :initarg :input  :accessor snazzy-form-field-input
	  :initform (make-instance input-sail)))
  (:documentation "A good-looking form field.")
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:div
	:class "form-field"
	(:label
	 :class "snazzy"
	 :field (ps:symbol-to-js-string :label)
	 (:span
	  :field (ps:symbol-to-js-string :title)
	  " ")
	 (:span :class "note"
		:field (ps:symbol-to-js-string :note)
		" "))
	(:div :class "input"
	      :field (ps:symbol-to-js-string :input-area)
	 
	 " ")
	(:div :class "error"
	      :field (ps:symbol-to-js-string :error)
              " "))))
  (:css ".form-field < .error { color: #ff0000; }"))

(defmethod post-render ((sail snazzy-form-field-sail))

  (setf-field
   (sail)
   :title (snazzy-form-field-title sail)
   :note (snazzy-form-field-note sail))

  (add-subsail sail (snazzy-form-field-input sail)
	       :group :input-area)

  (return (call-next-method))
  #+nil(set-input-name (snazzy-form-field-input sail) (snazzy-form-field-input-name sail)))

(defmethod add-to-json-object ((sail snazzy-form-field-sail) obj)
  ;; serialize the input
  (let ((name (snazzy-form-field-input-name sail)))
    (when name
      (add-to-json-object (snazzy-form-field-input sail) obj  :name name))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;  FieldSets
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail snazzy-form-fieldset-sail ()
  ((title :initarg :title :accessor snazzy-form-fieldset-title))
  (:documentation "A good-looking form field.")
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:div
	:class "field-set"
	:field (ps:symbol-to-js-string :root)
	(:h3
	 :field (ps:symbol-to-js-string :title)
	 " ")))))

(defmethod post-render ((sail snazzy-form-fieldset-sail))
  (setf-field
   (sail)
   :title (snazzy-form-fieldset-title sail)))

#+nil
(defmethod add-to-json-object ((sail snazzy-form-field-sail) obj)
  ;; serialize the input
  (add-to-json-object (snazzy-form-field-input sail) obj
		      :name (snazzy-form-field-input-name sail)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;  Inputs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defgeneric input-value (sail))
(defgeneric set-input-value (sail value))

(defsail abstract-input-sail () ())

(defsail input-sail (abstract-input-sail)
  ((name :initform nil :accessor input-sail-name :initarg :name)
   (type :initform "text" :accessor input-sail-type :initarg :type))
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:input
	:field (ps:symbol-to-js-string :root)
	:type "text"))))

(defmethod post-render ((sail input-sail))
  (write-attributes (sail-field sail :root) (create "type" (input-sail-type sail))))

(defmethod input-value ((sail snazzy-form-field-sail))
  (return (input-value (snazzy-form-field-input sail))))

(defmethod input-value ((sail input-sail))
  (return (slot-value (sail-field sail :root) 'js-global::value)))

(defmethod set-input-value (sail value)
  (setf (slot-value (dom-input sail) 'js-global::value) value))

(defmethod dom-input ((sail input-sail))
  (Return (sail-field sail :root)))

(defmethod add-to-json-object ((sail abstract-input-sail) obj &key name)
  (setf (slot-value obj name) (json-value (input-value sail))))

(defun snazzy-form-input-value (sail field-name)
  "Returns the input value of the given field in the given form."
  (return (input-value
           (snazzy-form-field-input
            (iodb-ui:snazzy-form-field sail field-name)))))

;(defmethod set-input-sail-name ((sail input-sail) name)
;  (setf (slot-value (sail-field sail :root) 'js-global::name) name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Checkbox input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail single-checkbox-input-sail (abstract-input-sail)
  ((checked? :initarg checked? :initform nil :accessor input-checked?)
   (note :initarg :note :initform "" :accessor input-note))
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:div :field (ps:symbol-to-js-string :container)
	     (:input :field (ps:symbol-to-js-string :root) :type "checkbox")
	     (:span :field (ps:symbol-to-js-string :note) "")))))

(defmethod post-render ((sail single-checkbox-input-sail))
  (setf (slot-value (sail-field sail :root) 'js-global::checked)
	(input-checked? sail)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Multiple checkbox input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail checkbox-subsail ()
  ((label :initarg :label :initform nil :accessor checkbox-label)
   (value :initarg :value :initform nil :accessor checkbox-value))
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:span
	:class "checkbox-item"
	(:input :field (ps:symbol-to-js-string :input) :type "checkbox")
	"  "
	(:span :field (ps:symbol-to-js-string :label))
	"  "))))

(defmethod dom-input ((sail checkbox-subsail))
  (return (sail-field sail :input)))

(defsail checkbox-input-sail (abstract-input-sail)
  ()
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:div :field (ps:symbol-to-js-string :container)
	     "  "))))

(defmethod add-checkbox ((sail checkbox-input-sail) value label)
  (let ((cb (make-instance checkbox-subsail :label label :value value)))
    (add-subsail sail cb :group :container)))

(defmethod input-value ((sail checkbox-input-sail))
  (return
    (remove-if-not
     #'identity
     (lispy-map (lambda (cb-subsail)
		  (let* ((input (sail-field cb-subsail :input))
			 (checked? (when input (slot-value input 'js-global::checked))))
		    (when checked?
		      (return (checkbox-value cb-subsail)))))
		(sail-subsails sail :container)))))

(defmethod set-input-value ((sail checkbox-input-sail) value-arr)
  (dolist (cb (sail-subsails sail :container))
    (setf (slot-value (dom-input cb) 'js-global::checked)
	  (and (find (checkbox-value cb) value-arr) t))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Multiple radio input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail radio-subsail ()
  ((label :initarg :label :initform nil :accessor radio-label)
   (value :initarg :value :initform nil :accessor radio-value))
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:span
	:class "checkbox-item"
	(:input :field (ps:symbol-to-js-string :input) :type "radio")
	"  "
	(:span :field (ps:symbol-to-js-string :label))
	"  "))))

(defmethod dom-input ((sail radio-subsail))
  (return (sail-field sail :input)))

(defsail radio-input-sail (abstract-input-sail)
  ()
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:div :field (ps:symbol-to-js-string :container)
	     "  "))))

(defmethod add-radio ((sail radio-input-sail) value label &key checked?)
  (let ((cb (make-instance radio-subsail :label label :value value)))
    (add-subsail sail cb :group :container)
    (setf (slot-value (sail-field cb :input) 'js-global::name)
	  (snazzy-form-field-input-name (sail-supersail (sail-supersail cb))))
    (setf (slot-value (sail-field cb :input) 'js-global::checked)
	  checked?)))

(defmethod input-value ((sail radio-input-sail))
  (let ((arr
	 (remove-if-not
	  #'identity
	  (lispy-map (lambda (cb-subsail)
		       (let* ((input (sail-field cb-subsail :input))
			      (checked? (when input (slot-value input 'js-global::checked))))
			 (when checked?
			   (return (radio-value cb-subsail)))))
		     (sail-subsails sail :container)))))
    (when (> (length arr) 0)
      (return (elt arr 0)))))

(defmethod set-input-value ((sail radio-input-sail) value)
  (dolist (cb (sail-subsails sail :container))
    (setf (slot-value (dom-input cb) 'js-global::checked)
	  (=== value (radio-value cb)))))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Single select input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+nil
(defsail radio-subsail ()
  ((label :initarg :label :initform nil :accessor radio-label)
   (value :initarg :value :initform nil :accessor radio-value))
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:span
	:class "checkbox-item"
	(:input :field (ps:symbol-to-js-string :input) :type "radio")
	"  "
	(:span :field (ps:symbol-to-js-string :label))
	"  "))))

(defsail select-input-sail (abstract-input-sail)
  ((input-value-map :initform (create) :accessor input-value-map))
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:select :field (ps:symbol-to-js-string :container)
	     "  "))))

(defmethod dom-input ((sail select-input-sail))
  (return (sail-field sail :container)))

(defmethod add-option ((sail select-input-sail) value label &key selected? default-selected?)
  (let* ((select (dom-input sail))
	 (option-num (length (slot-value select 'js-global::options))))
    (setf (slot-value (input-value-map sail) option-num)
	  value)
    (setf (slot-value select 'js-global::options option-num)
	  (new (js-global::*Option label option-num default-selected? selected?)))))

(defmethod input-value ((sail select-input-sail))
  (let ((key (slot-value (dom-input sail) 'js-global::value)))
    (return (slot-value (input-value-map sail) key))))

(defmethod set-input-value ((sail select-input-sail) v)
  (let ((options (slot-value (dom-input sail) 'js-global::options)))
    (dotimes (i (length options))
      (let ((val (slot-value (input-value-map sail) i)))
	(when (=== val v)
	  (setf (slot-value (elt options i) 'js-global::selected) t)
	  (return))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Autocomplete input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail autocomplete-input-sail (input-sail)
  ()
  (:view-superclasses input-sail-view))


    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Textarea input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail textarea-input-sail (abstract-input-sail)
  ()
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:textarea
	:rows "3" :cols "70"))))

(defmethod input-value ((sail textarea-input-sail))
  (return (slot-value (sail-field sail :root) 'js-global::value)))

(defmethod set-input-value ((sail textarea-input-sail) v)
  (setf (slot-value (sail-field sail :root) 'js-global::value)
        v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; An input that consistes of multiple, ordered inputs beneath it.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail compound-input-sail (abstract-input-sail)
  ()
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:div :class "compound"
	     (:div
	      :field (ps:symbol-to-js-string :inputs)
	      " ")
	     (:button :field (ps:symbol-to-js-string :add-button)
		      :type "button"
		      "Add")))))

(defmethod input-value ((sail compound-input-sail))
  (return (lispy-map input-value (sail-subsails sail :inputs))))

(defmethod set-input-value ((sail compound-input-sail) arr)
  (lispy-map set-input-value (sail-subsails sail :inputs) arr))

(defmethod post-render ((sail compound-input-sail))
  (register-sail-event-handlers 
   (sail)
   (:add-button "click" (ev)
		(stop-dom-event ev)
		(log "Adding event to compound input sail.")
		(make-instance add-input-event :sail sail :origin sail))))

(defclass remove-input-event (sail-inspired-event)
  ((input :initarg :input :initform nil :accessor event-input))
  (:documentation "Fired by an input sail when the user has
indicated that she would like to remove the input."))

(defclass add-input-event (sail-inspired-event)
  ()
  (:documentation "Fired by a compound input sail when the user has
indicated that she would like to add another input to the compound
input."))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Multicomplete Input: for inputting discrete elements from
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defsail multicomplete-list-item ()
  ((value :initform nil :accessor list-item-value :initarg :value))
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:li :class "multicomplete-li"
            (:span :field (ps:symbol-to-js-string :text)
                   "text")
            (:a :href "#" :class "closebutton"
                "x")))))

(defsail multicomplete-input-sail (abstract-input-sail)
  ()
  (:css " ")
  (:html
   (cl-who:with-html-output-to-string (stream)
       (:ul :class "multicomplete"
            :field (ps:symbol-to-js-string :list)
            " "))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; Hinting input box
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun make-input-hint (elem &key hint-class text)
  (let ((text (or text (@ elem 'jsns::title))))
    (symbol-macrolet ((input-value (slot-value elem 'jsns::value)))
      (flet ((on-focus ()
               (when (=== text input-value)
                 (setf input-value ""))
               (when hint-class
                 (elem-remove-class elem hint-class)))
             (on-blur ()
               (when (=== "" input-value)
                 (setf input-value text)
                 (when hint-class
                   (elem-add-class elem hint-class)))))
        (register-dom-event-handler elem "focus" #'on-focus)
        (register-dom-event-handler elem "blur" #'on-blur)
        (on-blur)))))
